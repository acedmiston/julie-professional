"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/resend";
exports.ids = ["vendor-chunks/resend"];
exports.modules = {

/***/ "(action-browser)/./node_modules/resend/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/resend/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resend: () => (/* binding */ Resend)\n/* harmony export */ });\n/* harmony import */ var _react_email_render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-email/render */ \"(action-browser)/./node_modules/@react-email/render/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// package.json\nvar version = \"2.1.0-canary.1\";\n// src/api-keys/api-keys.ts\nvar ApiKeys = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/api-keys\", payload, options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/api-keys\");\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/api-keys/${id}`);\n            return data;\n        });\n    }\n};\n// src/audiences/audiences.ts\nvar Audiences = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/audiences\", payload, options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/audiences\");\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/audiences/${id}`);\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/audiences/${id}`);\n            return data;\n        });\n    }\n};\n// src/batch/batch.ts\n\nvar Batch = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    send(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            return this.create(payload, options);\n        });\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            for (const email of payload){\n                if (email.react) {\n                    email.html = yield (0,_react_email_render__WEBPACK_IMPORTED_MODULE_0__.renderAsync)(email.react);\n                    delete email.react;\n                }\n            }\n            const data = yield this.resend.post(\"/emails/batch\", payload, options);\n            return data;\n        });\n    }\n};\n// src/contacts/contacts.ts\nvar Contacts = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(`/audiences/${payload.audience_id}/contacts`, payload, options);\n            return data;\n        });\n    }\n    list(_0) {\n        return __async(this, arguments, function*({ audience_id }) {\n            const data = yield this.resend.get(`/audiences/${audience_id}/contacts`);\n            return data;\n        });\n    }\n    get(_0) {\n        return __async(this, arguments, function*({ audience_id, id }) {\n            const data = yield this.resend.get(`/audiences/${audience_id}/contacts/${id}`);\n            return data;\n        });\n    }\n    remove(_0) {\n        return __async(this, arguments, function*({ audience_id, id }) {\n            const data = yield this.resend.delete(`/audiences/${audience_id}/contacts/${id}`);\n            return data;\n        });\n    }\n};\n// src/domains/domains.ts\nvar Domains = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            const data = yield this.resend.post(\"/domains\", payload, options);\n            return data;\n        });\n    }\n    list() {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(\"/domains\");\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/domains/${id}`);\n            return data;\n        });\n    }\n    remove(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.delete(`/domains/${id}`);\n            return data;\n        });\n    }\n    verify(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.post(`/domains/${id}/verify`);\n            return data;\n        });\n    }\n};\n// src/emails/emails.ts\n\nvar Emails = class {\n    constructor(resend){\n        this.resend = resend;\n    }\n    send(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            return this.create(payload, options);\n        });\n    }\n    create(_0) {\n        return __async(this, arguments, function*(payload, options = {}) {\n            if (payload.react) {\n                payload.html = yield (0,_react_email_render__WEBPACK_IMPORTED_MODULE_0__.renderAsync)(payload.react);\n                delete payload.react;\n            }\n            const data = yield this.resend.post(\"/emails\", payload, options);\n            return data;\n        });\n    }\n    get(id) {\n        return __async(this, null, function*() {\n            const data = yield this.resend.get(`/emails/${id}`);\n            return data;\n        });\n    }\n};\n// src/guards.ts\nvar isResendErrorResponse = (response)=>{\n    if (typeof response !== \"object\" || response === null) {\n        return false;\n    }\n    const error = response;\n    if (typeof error !== \"object\" || error === null) {\n        return false;\n    }\n    const { message, name } = error;\n    return typeof message === \"string\" && typeof name === \"string\";\n};\n// src/resend.ts\nvar baseUrl = process.env.RESEND_BASE_URL || \"https://api.resend.com\";\nvar userAgent = process.env.RESEND_USER_AGENT || `resend-node:${version}`;\nvar Resend = class {\n    constructor(key){\n        this.key = key;\n        this.apiKeys = new ApiKeys(this);\n        this.audiences = new Audiences(this);\n        this.batch = new Batch(this);\n        this.contacts = new Contacts(this);\n        this.domains = new Domains(this);\n        this.emails = new Emails(this);\n        if (!key) {\n            this.key = process.env.RESEND_API_KEY;\n            if (!this.key) {\n                throw new Error('Missing API key. Pass it to the constructor `new Resend(\"re_123\")`');\n            }\n        }\n        this.headers = new Headers({\n            Authorization: `Bearer ${this.key}`,\n            \"User-Agent\": userAgent,\n            \"Content-Type\": \"application/json\"\n        });\n    }\n    fetchRequest(_0) {\n        return __async(this, arguments, function*(path, options = {}) {\n            const response = yield fetch(`${baseUrl}${path}`, options);\n            if (!response.ok) {\n                const error = yield response.json();\n                if (isResendErrorResponse(error)) {\n                    return {\n                        data: null,\n                        error\n                    };\n                }\n                return {\n                    data: null,\n                    error\n                };\n            }\n            const data = yield response.json();\n            return {\n                data,\n                error: null\n            };\n        });\n    }\n    post(_0, _1) {\n        return __async(this, arguments, function*(path, entity, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"POST\",\n                headers: this.headers,\n                body: JSON.stringify(entity)\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    get(_0) {\n        return __async(this, arguments, function*(path, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"GET\",\n                headers: this.headers\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    put(_0, _1) {\n        return __async(this, arguments, function*(path, entity, options = {}) {\n            const requestOptions = __spreadValues({\n                method: \"PUT\",\n                headers: this.headers,\n                body: JSON.stringify(entity)\n            }, options);\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n    delete(path, query) {\n        return __async(this, null, function*() {\n            const requestOptions = {\n                method: \"DELETE\",\n                headers: this.headers,\n                body: JSON.stringify(query)\n            };\n            return this.fetchRequest(path, requestOptions);\n        });\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/resend/dist/index.mjs\n");

/***/ })

};
;